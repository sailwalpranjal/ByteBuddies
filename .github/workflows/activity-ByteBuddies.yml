name: ByteBuddies Automation Change

on:
  schedule:
    - cron: '0 */2 * * *'  # Every 2 hours
  workflow_dispatch:

jobs:
  setup_and_balance_activity:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: Configure Git
        run: |
          git config --global user.email "pranjalsailwal09@gmail.com"
          git config --global user.name "sailwalpranjal"

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Pull Latest Changes
        run: |
          git pull origin main || true

      - name: Create .gitignore for Auto Files
        run: |
          echo "Change_autologs.txt" >> .gitignore
          echo "auto_change.txt" >> .gitignore
          git add .gitignore
          git commit -m "Add auto-generated files to .gitignore" || echo "No changes to commit"
          git pull origin main || true  # Ensure the branch is up-to-date
          git push origin main || echo "Push failed; might need manual intervention"

      - name: Manage Auto Files
        run: |
          # Temporarily remove files from .gitignore
          sed -i '/Change_autologs.txt/d' .gitignore
          sed -i '/auto_change.txt/d' .gitignore
          git add Change_autologs.txt auto_change.txt
          git commit -m "Update regarding specific functionality" || echo "No changes to commit"
          git pull origin main || true  # Ensure branch is up-to-date before push
          git push origin main || echo "Push failed; might need manual intervention"
          # Restore .gitignore
          echo "Change_autologs.txt" >> .gitignore
          echo "auto_change.txt" >> .gitignore
          git add .gitignore
          git commit -m "Restore .gitignore" || echo "No changes to commit"
          git push origin main || echo "Push failed; might need manual intervention"

      - name: Perform Action
        run: |
          case "${{ steps.decide_action.outputs.action }}" in
            commit)
              echo "Making changes to the file and committing..."
              echo "// Change made by script on $(date)" >> Change_autologs.txt
              git add Change_autologs.txt
              git commit -m "Update regarding specific functionality" || echo "No changes to commit"
              git pull origin main || true  # Ensure branch is up-to-date before push
              git push origin main || echo "Push failed; might need manual intervention"
              ;;
            pr)
              echo "Creating and resolving a PR..."
              git checkout -b "feature-auto-pr-$(date +%s)"
              echo "// Auto-generated changes for PR" >> auto_change.txt
              git add auto_change.txt
              git commit -m "Feature: auto-generated PR"
              git push origin HEAD
              gh pr create --title "Auto PR Feature" --body "This PR was automatically created."
              gh pr merge --squash --delete-branch --auto
              ;;
            issue)
              echo "Creating and closing an issue..."
              ISSUE_NUM=$(gh issue create --title "Auto Issue" --body "This is a scripted issue." | grep -o '[0-9]\+')
              gh issue close $ISSUE_NUM --comment "Issue automatically resolved."
              ;;
            review)
              echo "Simulating code review..."
              gh pr list --state open --limit 1 | grep -o '#[0-9]\+' | while read pr_id; do
                gh pr review $pr_id --approve --body "Reviewed: Looks good!"
              done
              ;;
          esac

      - name: Update Activity Tracking
        run: |
          echo "$(date): Updated by ${GITHUB_ACTOR}" >> update_log.txt
          git add update_log.txt
          git commit -m "Update activity log" || echo "No changes to commit"
          git pull origin main || true  # Ensure branch is up-to-date before push
          git push origin main || echo "Push failed; might need manual intervention"

      - name: Clean Up
        run: |
          git branch -D feature-auto-pr || true
          git stash clear
          git clean -f
