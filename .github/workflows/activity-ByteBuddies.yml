name: ByteBuddies automation change

on:
  schedule:
    - cron: '0 */2 * * *'  # Every 2 hours
  workflow_dispatch:

jobs:
  setup_and_balance_activity:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: Configure Git
        run: |
          git config --global user.email "pranjalsailwal09@gmail.com"
          git config --global user.name "sailwalpranjal"

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Fetch Activity Data
        id: fetch_activity
        run: |
          COMMIT_COUNT=$(gh api -X GET repos/:owner/:repo/commits | jq length)
          PR_COUNT=$(gh api -X GET repos/:owner/:repo/pulls | jq length)
          ISSUE_COUNT=$(gh api -X GET repos/:owner/:repo/issues | jq length)
          REVIEW_COUNT=$(gh api -X GET repos/:owner/:repo/pulls/reviews | jq length)
          TOTAL_COUNT=$((COMMIT_COUNT + PR_COUNT + ISSUE_COUNT + REVIEW_COUNT))
          echo "commit_pct=$((COMMIT_COUNT * 100 / TOTAL_COUNT))" >> $GITHUB_ENV
          echo "pr_pct=$((PR_COUNT * 100 / TOTAL_COUNT))" >> $GITHUB_ENV
          echo "issue_pct=$((ISSUE_COUNT * 100 / TOTAL_COUNT))" >> $GITHUB_ENV
          echo "review_pct=$((REVIEW_COUNT * 100 / TOTAL_COUNT))" >> $GITHUB_ENV

      - name: Determine Next Action
        id: decide_action
        run: |
          # Define minimum thresholds for activity balance
          MIN_COMMIT_PCT=10
          MIN_PR_PCT=10
          MIN_ISSUE_PCT=10
          MIN_REVIEW_PCT=10

          # Get the current percentages from environment variables
          COMMIT_PCT=${{ env.commit_pct }}
          PR_PCT=${{ env.pr_pct }}
          ISSUE_PCT=${{ env.issue_pct }}
          REVIEW_PCT=${{ env.review_pct }}

          # Determine the least performed activity
          if [[ $COMMIT_PCT -lt $MIN_COMMIT_PCT && $PR_PCT -ge $MIN_PR_PCT && $ISSUE_PCT -ge $MIN_ISSUE_PCT && $REVIEW_PCT -ge $MIN_REVIEW_PCT ]]; then
            NEXT_ACTION="commit"
          elif [[ $PR_PCT -lt $MIN_PR_PCT && $COMMIT_PCT -ge $MIN_COMMIT_PCT && $ISSUE_PCT -ge $MIN_ISSUE_PCT && $REVIEW_PCT -ge $MIN_REVIEW_PCT ]]; then
            NEXT_ACTION="pr"
          elif [[ $ISSUE_PCT -lt $MIN_ISSUE_PCT && $COMMIT_PCT -ge $MIN_COMMIT_PCT && $PR_PCT -ge $MIN_PR_PCT && $REVIEW_PCT -ge $MIN_REVIEW_PCT ]]; then
            NEXT_ACTION="issue"
          elif [[ $REVIEW_PCT -lt $MIN_REVIEW_PCT && $COMMIT_PCT -ge $MIN_COMMIT_PCT && $PR_PCT -ge $MIN_PR_PCT && $ISSUE_PCT -ge $MIN_ISSUE_PCT ]]; then
            NEXT_ACTION="review"
          else
            NEXT_ACTION="commit"  # Default action if all percentages are above the threshold
          fi

          echo "::set-output name=action::${NEXT_ACTION}"

      - name: Perform Action
        run: |
          case "${{ steps.decide_action.outputs.action }}" in
            commit)
              echo "Making changes to the file and committing..."
              echo "// Change made by script on $(date)" >> Change_autologs.txt
              git add Change_autologs.txt
              git commit -m "Update regarding specific functionality"
              git push origin main
              ;;
            pr)
              echo "Creating and resolving a PR..."
              git checkout -b "feature-auto-pr-$(date +%s)"
              echo "// Auto-generated changes for PR" >> auto_change.txt
              git add auto_change.txt
              git commit -m "Feature: auto-generated PR"
              git push origin HEAD
              gh pr create --title "Auto PR Feature" --body "This PR was automatically created."
              gh pr merge --squash --delete-branch --auto
              ;;
            issue)
              echo "Creating and closing an issue..."
              ISSUE_NUM=$(gh issue create --title "Auto Issue" --body "This is a scripted issue." | grep -o '[0-9]\+')
              gh issue close $ISSUE_NUM --comment "Issue automatically resolved."
              ;;
            review)
              echo "Simulating code review..."
              gh pr list --state open --limit 1 | grep -o '#[0-9]\+' | while read pr_id; do
                gh pr review $pr_id --approve --body "Reviewed: Looks good!"
              done
              ;;
          esac

      - name: Update Activity Tracking
        run: |
          echo "$(date): Updated by ${GITHUB_ACTOR}" >> update_log.txt
          git add update_log.txt
          git commit -m "Update activity log"
          git push origin main

      - name: Clean Up
        run: |
          git branch -D feature-auto-pr || true
          git stash clear
          git clean -f
